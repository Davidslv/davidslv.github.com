<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Davidslv</title>
    <description>I&#39;ve been programming in Ruby commercially since 2011 and I&#39;ve built awesome projects and worked in amazing teams ever since!
</description>
    <link>http://davidslv.com/</link>
    <atom:link href="http://davidslv.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 May 2016 17:24:40 +0100</pubDate>
    <lastBuildDate>Wed, 04 May 2016 17:24:40 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>You can use slack with irssi</title>
        <description>&lt;p&gt;As you may know, Slack has been adopted by a considerable amount of companies and groups of people to keep in touch with each other.&lt;/p&gt;

&lt;p&gt;If you use IRC, or still feel nostalgic about those golden days, you might have heard of &lt;a href=&quot;https://irssi.org&quot;&gt;irssi&lt;/a&gt; at some point.&lt;/p&gt;

&lt;p&gt;A few days ago I discovered that it’s possible to connect to slack with irssi&lt;/p&gt;

&lt;p&gt;All you need to do is follow the instructions in &lt;code class=&quot;highlighter-rouge&quot;&gt;slack.com/account/gateways&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And if you want to add a connection and make it persistent is simple enough:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/network add -nick &amp;lt;nickname&amp;gt; slack
/server add -auto -ssl -network slack &amp;lt;account&amp;gt;.irc.slack.com 6667 &amp;lt;password&amp;gt;
/save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note: If you love emojis I’m afraid you will not see them&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 17:05:00 +0100</pubDate>
        <link>http://davidslv.com/productivity/2016/05/04/you-can-use-slack-with-irssi.html</link>
        <guid isPermaLink="true">http://davidslv.com/productivity/2016/05/04/you-can-use-slack-with-irssi.html</guid>
        
        
        <category>productivity</category>
        
      </item>
    
      <item>
        <title>Use Rspec bisect</title>
        <description>&lt;p&gt;Have you ever debugged code by commenting out half of it and seeing if the error still occurs, and if not, then trying the other half? And then half again of the problematic section? And so on… Then you’ve done a binary search.&lt;/p&gt;

&lt;p&gt;If you’ve ever done this, you know it can be a time consuming process. With a large test suite, and a huge number of possible orderings of them, it would take a long time to find an order-dependent failure manually. Fortunately, &lt;a href=&quot;https://relishapp.com/rspec/rspec-core/docs/command-line/bisect&quot; target=&quot;\_blank&quot;&gt;Rspec bisect&lt;/a&gt; automates this process for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ rspec spec --bisect --seed 61655&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 09 Apr 2016 17:00:00 +0100</pubDate>
        <link>http://davidslv.com/ruby/2016/04/09/rspec-bisect.html</link>
        <guid isPermaLink="true">http://davidslv.com/ruby/2016/04/09/rspec-bisect.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Building a cache mechanism</title>
        <description>&lt;p&gt;A few days ago I implemented a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot; target=&quot;\_blank&quot;&gt;Cache&lt;/a&gt; mechanism in ruby, initially I was about to use Redis, it allows you to create keys with values and also set an expiration time.&lt;/p&gt;

&lt;p&gt;The caveat is that by using Redis this tiny app was depending in another 3rd party software to run
and I didn’t wanted to end up depending in anything else for this particular case.
By the way, I did thought about memcached but then again I didn’t wanted extra dependencies.&lt;/p&gt;

&lt;p&gt;The purpose of this caching mechanism is to prevent calling the database every time we need to count how many records are in different tables. Instead it will read the value from the cache until that value expires.&lt;/p&gt;

&lt;p&gt;So a few minutes later I had a tested working solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cache&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expire_in_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:expire_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expire_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expire_in_secs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:expire_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can find the spec file in this &lt;strong&gt;&lt;a href=&quot;https://gist.githubusercontent.com/Davidslv/1d3ac9f22c5e7edb6c6e/raw/f9c95bec3dc70855a55b4eea487f22d07fd50f22/cache_spec.rb&quot; target=&quot;\_blank&quot;&gt;gist&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There was just a problem, this will run in a Threaded Web Server, and guess what? This code is not thread-safe.&lt;/p&gt;

&lt;p&gt;There’s a few things we need to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby core classes are not thread-safe&lt;/li&gt;
  &lt;li&gt;It will work as intended under MRI because of GIL (Global Interpreter Lock)&lt;/li&gt;
  &lt;li&gt;It will not work as intended under Rubinius or Jruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;### How can we solve this?&lt;/p&gt;

&lt;p&gt;We can use a Mutex, which is a shorthand for “mutual exclusion”, it implements a simple semaphore to coordinate access to shared data from multiple concurrent threads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cache&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@lock&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expire_in_secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:expire_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expire_at: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expire_in_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:expire_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you could argue that I should also lock while reading, but in reality for the purpose of the code it really doesn’t matter, the only thing it may happen is to have an earlier count and we are a few numbers behind than we were suppose to.&lt;/p&gt;

&lt;h3 id=&quot;how-can-you-make-sure-it-is-thread-safe&quot;&gt;How can you make sure it is thread safe?&lt;/h3&gt;

&lt;p&gt;You can spawn a few threads and increase the value of the key, so if we create 400 threads each adding 10 times you should expect the last value to be 4000.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We expect the value to be always 4000 when running this code.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jstorimer.com/pages/ruby-core-classes-arent-thread-safe&quot; target=&quot;\_blank&quot;&gt;Ruby core classes aren’t thread safe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_interpreter_lock&quot; target=&quot;\_blank&quot;&gt;Global Interpreter Lock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 17:00:00 +0000</pubDate>
        <link>http://davidslv.com/ruby/2016/01/07/building-a-cache-mechanism.html</link>
        <guid isPermaLink="true">http://davidslv.com/ruby/2016/01/07/building-a-cache-mechanism.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>How DNS works?</title>
        <description>&lt;p&gt;Before we dive into DNS I would like to start with some background to what generated the Internet as we know it today.&lt;/p&gt;

&lt;p&gt;Definitely the creation of the DNS is one of the most important creations, specially because without it you wouldn’t be reading this now, you will understand why later on, keep reading.&lt;/p&gt;

&lt;p&gt;In the late 1960s, the U.S. Department of Defense’s Advanced Research Projects Agency (&lt;a href=&quot;https://en.wikipedia.org/wiki/DARPA&quot; target=&quot;\_blank&quot;&gt;DARPA&lt;/a&gt;), began funding an experimental computer network, that connected research organisations in the United States, they called it the &lt;a href=&quot;https://en.wikipedia.org/wiki/ARPANET&quot; target=&quot;\_blank&quot;&gt;ARPAnet&lt;/a&gt;. Their goal was to allow to government contractors to share computing resources, however, users also used the network for collaboration, from sharing files and software to exchanging e-mails, to joint development and research using shared remote computers.&lt;/p&gt;

&lt;p&gt;Later, in early 1980s the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot; target=&quot;\_blank&quot;&gt;TCP/IP suite&lt;/a&gt; is developed, and quickly becomes the standard host-networking protocol on the ARPAnet. The inclusion of such protocol in the University of California at Berkeley’s popular BSD UNIX was instrumental in democratizing internet working. And since &lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&quot; target=&quot;\_blank&quot;&gt;BSD Unix&lt;/a&gt; was free to universities, this meant that internetworking - and ARPAnet connectivity - were suddenly available cheaply to many more organisations than were previously attached to the ARPAnet.&lt;/p&gt;

&lt;p&gt;Many of the computers being connected to the ARPAnet were being connected to local networks (LANs), and very shortly the other computers on the LANs were communicating via ARPAnet as well, and so the network grew from a handful of hosts to tens of thousands of hosts the original ARPAnet became the backbone of a confederation of local and regional networks based on TCP/IP, called the Internet.&lt;/p&gt;

&lt;p&gt;Although, in 1970s ARPAnet was a small community of a few hundreds of hosts, manageable from a single file, HOSTS.TXT, containing a name-to-address mapping for every host connected to the network. Maintained by SRI’s Network Information Center (&lt;a href=&quot;https://en.wikipedia.org/wiki/InterNIC&quot; target=&quot;\_blank&quot;&gt;NIC&lt;/a&gt;) and distributed from a single host, SRI-NIC. The administrators used to email their changes to the NIC, and periodically get the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hosts_(file)&quot; target=&quot;\_blank&quot;&gt;HOSTS.TXT&lt;/a&gt; file from SRI-NIC. Meanwhile the file was updated once or twice a week, but as the network grew, this scheme became unworkable, the size of the file grew in proportion to the growth in the number of ARPAnet hosts.&lt;/p&gt;

&lt;p&gt;When ARPAnet moved to TCP/IP, the population of the network exploded, and HOSTS.TXT was no longer a viable solution. The problem was that the single file mechanism didn’t scale well, and 3 main problems could be identified:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Traffic and Load
    &lt;ul&gt;
      &lt;li&gt;The toll on SRI-NIC, in terms of network traffic and processor load involved in distributing the file was becoming unbearable.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Name Collisions
    &lt;ul&gt;
      &lt;li&gt;No 2 hosts in HOSTS.TXT could have the same name.&lt;/li&gt;
      &lt;li&gt;NIC could assign addresses and guarantee uniqueness, but had no control over hostnames. There was nothing to prevent someone from adding a host with a conflicting name and breaking the whole scheme.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consistency
    &lt;ul&gt;
      &lt;li&gt;Keeping consistency of the file across the network became harder and harder. By the time the file had reached the whole network, a host could have changed addresses or a new host may have emerged.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so an investigation was started to develop a successor for HOSTS.TXT. Their goal was to create a system that solved the problems inherent in a unified host-table system.&lt;/p&gt;

&lt;p&gt;The new system would allow local administration of data and make that data available globally. The decentralisation of administration would eliminate the single-host bottleneck and relieve the traffic problem and local management would make the task of keeping data up-to-date much easier. Finally, it should use a hierarchical namespace to name hosts, this ensures the uniqueness of names.&lt;/p&gt;

&lt;p&gt;That’s when &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Mockapetris&quot; target=&quot;\_blank&quot;&gt;Paul Mockapetris&lt;/a&gt;, was responsible for designing the architecture of the new system and in 1984, he releases &lt;a href=&quot;https://tools.ietf.org/rfc/rfc882.txt&quot; target=&quot;\_blank&quot;&gt;RFC 882&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/rfc/rfc883.txt&quot; target=&quot;\_blank&quot;&gt;RFC 883&lt;/a&gt;, that describes the Domain Name System. Later those RFCs were replaced by &lt;a href=&quot;https://tools.ietf.org/rfc/rfc1034.txt&quot; target=&quot;\_blank&quot;&gt;RFC 1034&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/rfc/rfc1035.txt&quot; target=&quot;\_blank&quot;&gt;RFC 1035&lt;/a&gt;, which are the current specification of the DNS and they have been augmented by many others that describe DNS security problems, implementation problems, and so on…&lt;/p&gt;

&lt;h3 id=&quot;dns-in-a-nutshell&quot;&gt;DNS, in a Nutshell&lt;/h3&gt;

&lt;p&gt;The DNS is a distributed database. This structure allows a local control of the segments of the overall database. The data in each segment is available across the entire network through a client/server scheme. The way this system achieves robustness and adequate performance are achieved through replication and caching.&lt;/p&gt;

&lt;p&gt;A program called NameServer is the server side of the client/server mechanism. They contain segments of the database and make the information available to clients, called Resolvers. Resolvers create queries and send them across a network to a nameserver.&lt;/p&gt;

&lt;p&gt;The structure of the DNS database is constituted by nodes (computers) with the “root” node on top of the tree. Each node has a text label, that identifies the node relative to its parent. Although, one label - the null label, or “ “ - is reserved for the root node. Each node is also the root of a new subtree of the overall tree, and each subtree represents a partition of the overall database. Each domain can be further divided into additional partitions called subdomains. Every domain has a unique name and also identifies its position in the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dns.png&quot; alt=&quot;Network Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nowadays there are 13 root servers, every single one of them starts with a letter, from A to M, and we can see them when you use the command line tool &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt;, which is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~ $ dig +trace davidslv.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-3ubuntu0.5-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; +trace davidslv.com
;; global options: +cmd
.			518400	IN	NS	E.ROOT-SERVERS.NET.
.			518400	IN	NS	F.ROOT-SERVERS.NET.
.			518400	IN	NS	G.ROOT-SERVERS.NET.
.			518400	IN	NS	H.ROOT-SERVERS.NET.
.			518400	IN	NS	I.ROOT-SERVERS.NET.
.			518400	IN	NS	J.ROOT-SERVERS.NET.
.			518400	IN	NS	K.ROOT-SERVERS.NET.
.			518400	IN	NS	L.ROOT-SERVERS.NET.
.			518400	IN	NS	M.ROOT-SERVERS.NET.
.			518400	IN	NS	A.ROOT-SERVERS.NET.
.			518400	IN	NS	B.ROOT-SERVERS.NET.
.			518400	IN	NS	C.ROOT-SERVERS.NET.
.			518400	IN	NS	D.ROOT-SERVERS.NET.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see in that trace that it starts by going through the root servers before going through the global tld (top level domain) servers and then goes through the name-servers and finally gets the IP addresses of the hosts associated to the domain name.&lt;/p&gt;

&lt;p&gt;I would like to show you a diagram, that represents my own interpretation of how the DNS works, I don’t intend it to be more complex than needed, so don’t rely entirely on it because it might be missing a lot of things, remember that the DNS is a complex system, there’s many things involved, and in order for us to receive information in seconds there’s is a bunch of things that happen in the background. I think it’s fascinating!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dns-diagram.png&quot; alt=&quot;DNS Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I would like to complement this article with some references:&lt;/p&gt;

&lt;p&gt;Piskvor, &lt;a href=&quot;http://stackoverflow.com/a/2092602/204752&quot; target=&quot;\_blank&quot;&gt;http://stackoverflow.com/a/2092602/204752&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pete Keen, &lt;a href=&quot;https://www.petekeen.net/dns-the-good-parts&quot; target=&quot;\_blank&quot;&gt;https://www.petekeen.net/dns-the-good-parts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DNSimple, amazing story &lt;a href=&quot;https://howdns.works&quot; target=&quot;\_blank&quot;&gt;https://howdns.works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596100575.do&quot; target=&quot;\_blank&quot;&gt;Cricket Liu, Paul Albitz. 2006. DNS and BIND, 5th Edition, O’Reilly Media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 17:00:00 +0000</pubDate>
        <link>http://davidslv.com/professional/2015/11/04/how-dns-works.html</link>
        <guid isPermaLink="true">http://davidslv.com/professional/2015/11/04/how-dns-works.html</guid>
        
        
        <category>professional</category>
        
      </item>
    
      <item>
        <title>Improve your attention to detail</title>
        <description>&lt;p&gt;Nowadays Front End Software Engineers face several challenges, they have to tackle the considerable amount of different devices with different screen sizes and resolutions,
even though there’s plenty of CSS frameworks out there to ease this problem, you still need to know your way around.
You need to pay attention to detail, sometimes a small mistake is all it takes to ruin your work presentation.&lt;/p&gt;

&lt;p&gt;Recently I built a website that needs to be compatible with mobile devices, so I took the opportunity to re-visit Twitter Bootstrap CSS framework, the project was small but challenging enough and I knew exactly how I would like to tackle it.&lt;/p&gt;

&lt;p&gt;I had mobile first in mind, although my first mistake was to be using the browser window resized to accomplish this, so something like &lt;code class=&quot;highlighter-rouge&quot;&gt;col-md-4&lt;/code&gt; seemed great to me. Soon I understood that something wasn’t quite right, I knew that mobile wasn’t a priority for this project, so I didn’t let it slow me down and I focused on having the website ready as soon as possible.&lt;/p&gt;

&lt;p&gt;When I finished it, I decided to investigate how broken the mobile version was, and oh boy… it was bad, but just aesthetically, elements were not quite in the right position, but that was fixable. I decided it was time to bring in the right tools!&lt;/p&gt;

&lt;p&gt;I started by going back to Twitter Bootstrap documentation and re-read it to make sure I wasn’t missing something, and I soon realised that I should move anything &lt;code class=&quot;highlighter-rouge&quot;&gt;col-md-*&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;col-sm-*&lt;/code&gt; so the elements start by looking the same, even on iPhone. At this time I was using &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;\_blank&quot;&gt;Chrome DevTools&lt;/a&gt; which allows you to simulate different devices, in different positions (portrait/landscape). It even allows you to simulate the network speed, and allows you to do a bunch of other things that I suspect you know about already.&lt;/p&gt;

&lt;p&gt;Although this helped, it was not enough to tackle all the issues, as I soon noticed when on my iPhone 6 there was one element that was out of position, for no apparent reason even though DevTools was showing everything as I intended. So now I had an issue I couldn’t reproduce on my laptop but it was happening on my iPhone… I thought how do I tackle this?&lt;/p&gt;

&lt;p&gt;The answer was simple, if you have Xcode installed with the iPhone Simulator you can open Safari and use it as long as the website is not only local, once you are in the website, you need to open &lt;strong&gt;Safari&lt;/strong&gt;, go to &lt;strong&gt;Preferences&lt;/strong&gt;, &lt;strong&gt;Advanced&lt;/strong&gt; and check the box saying “&lt;strong&gt;Show Develop menu in menu bar&lt;/strong&gt;”. Now go to &lt;strong&gt;Safari&lt;/strong&gt; and under &lt;strong&gt;Develop&lt;/strong&gt; you will find &lt;strong&gt;iOS Simulator&lt;/strong&gt;, open the page that you want to run Safari Web Inspector – it works similar to &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;\_blank&quot;&gt;Chrome DevTools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In under 10 minutes I had identified the problem. Since I was playing with the simulator and Safari Web Inspector, I took sometime to understand the time it was taking to load the website. I managed to find that an image that was too big and delayed the page to load by 3 seconds.
If you need some more information about how to set it up you, read this &lt;a href=&quot;http://webdesign.tutsplus.com/articles/quick-tip-using-web-inspector-to-debug-mobile-safari--webdesign-8787&quot; target=&quot;\_blank&quot;&gt;quick tip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;## Conclusion&lt;/p&gt;

&lt;p&gt;Attention to detail is key in any profession, knowing and using the right tools helps you to have visibility beyond your
thinking and helps you fix those small details that make all the difference.
In the future, it’s worth having a check list of things you need to do and that you can also double check, like airline pilots do before a flight.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 11:10:00 +0000</pubDate>
        <link>http://davidslv.com/professional/life/2015/11/03/attention-to-detail-is-important.html</link>
        <guid isPermaLink="true">http://davidslv.com/professional/life/2015/11/03/attention-to-detail-is-important.html</guid>
        
        <category>development</category>
        
        <category>professional</category>
        
        <category>professional life</category>
        
        
        <category>professional</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Setup a Raspiberry Pi to mine cryptocurrency</title>
        <description>&lt;p&gt;I’ve been &lt;a href=&quot;https://en.bitcoin.it/wiki/Mining&quot; target=&quot;\_blank&quot;&gt;mining&lt;/a&gt; since May 2015, with 3 &lt;a href=&quot;http://ecx.images-amazon.com/images/I/81J3I--QY5L._SY355_.jpg&quot; target=&quot;\_blank&quot;&gt;Rockminer R-BOX&lt;/a&gt; giving a total of 300Gh/s,
although it sounds like a lot of speed, I wouldn’t recommend you to mine &lt;a href=&quot;https://bitcoin.org/en/&quot; target=&quot;\_blank&quot;&gt;Bitcoins&lt;/a&gt; as that requires much more &lt;a href=&quot;https://bitcoin.org/en/vocabulary#hash-rate&quot; target=&quot;\_blank&quot;&gt;hash rate&lt;/a&gt; to be processed, and you will be spending more money in electricity than getting any Bitcoins.
You should assume that at this moment mining should be seen as non-profitable hobby, my main goal was just to fulfill my curiosity.&lt;/p&gt;

&lt;p&gt;The hardware I used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 raspberry pi (Quad Core), I used other models but they crashed after a few hours…&lt;/li&gt;
  &lt;li&gt;1 usb hub&lt;/li&gt;
  &lt;li&gt;1 corsair CX 600M Power Supply&lt;/li&gt;
  &lt;li&gt;3 Rockminer R-BOX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you already have the operating system &lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot; target=&quot;\_blank&quot;&gt;Raspbian&lt;/a&gt;, open the command line (Terminal) and type the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install libusb-1.0-0-dev libusb-1.0-0 libcurl4-openssl-dev libncurses5-dev libudev-dev -y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you finished updating and installing the needed packages go ahead and download &lt;strong&gt;cgminer&lt;/strong&gt; (that’s the latest stable version at the moment of my writing)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    wget http://ck.kolivas.org/apps/cgminer/cgminer-4.9.1.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then “unzip” it&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    tar xvf cgminer-4.9.1.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Enter &lt;strong&gt;cgminer&lt;/strong&gt; directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    cd cgminer-4.9.1/
    ./configure --enable-icarus
    sudo make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After installing it all you need to do is to find a mining pool to join. And the &lt;strong&gt;stratum&lt;/strong&gt; url will be given to you, make sure you setup a worker and a password for it.&lt;/p&gt;

&lt;p&gt;Then all you need to do is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    cgminer --icarus-options 115200:1:1 -o stratum+tcp://MININGPOOL_URL_HERE.com:2222 -u WORKER_NAME_HERE -p PASSWORD_HERE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you see that everything is up and running I recommend you to write that command in &lt;strong&gt;/etc/rc.local&lt;/strong&gt; so it starts mining on startup, avoiding you to have to write it all the time you restart your raspberry pi.&lt;/p&gt;

&lt;p&gt;Have fun, enjoy the noise :D&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Oct 2015 02:00:00 +0100</pubDate>
        <link>http://davidslv.com/cryptocurrency/2015/10/08/setup-raspberry-pi-to-mine-cryptocurrency.html</link>
        <guid isPermaLink="true">http://davidslv.com/cryptocurrency/2015/10/08/setup-raspberry-pi-to-mine-cryptocurrency.html</guid>
        
        <category>cryptocurrency</category>
        
        <category>blackcoin</category>
        
        <category>mining</category>
        
        <category>raspberry-pi</category>
        
        
        <category>cryptocurrency</category>
        
      </item>
    
      <item>
        <title>How to protect your credentials on Gemfile.lock</title>
        <description>&lt;p&gt;As you might know, it isn’t a good idea to store any kind of credentials under your VCS (like git).&lt;/p&gt;

&lt;p&gt;Although if you have some private gems you probably wrote this on your Gemfile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://username:password@gemserver.com&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then someone told you you should have the username and password stored in &lt;a href=&quot;https://en.wikipedia.org/wiki/Environment_variable&quot; target=&quot;\_blank&quot;&gt;Environment Variables&lt;/a&gt; so you went and assigned
the username and password to them and your Gemfile became like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;USERNAME&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;PASSWORD&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gemserver.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But… did you notice what happens when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Your Gemfile.lock now has the username and password written there, so much for the
environment variables right?&lt;/p&gt;

&lt;p&gt;The bundler team heard your prayers and they actually &lt;a href=&quot;http://bundler.io/man/bundle-config.1.html#CREDENTIALS-FOR-GEM-SOURCES&quot; target=&quot;\_blank&quot;&gt;implemented something&lt;/a&gt; to solve this problem!&lt;/p&gt;

&lt;p&gt;So all you need to do is go back to your Gemfile and remove the credentials from the url like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://gemserver.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now create an environment variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLE_GEMSERVER__COM&lt;/code&gt;, this will match the url &lt;code class=&quot;highlighter-rouge&quot;&gt;gemserver.com&lt;/code&gt;
where the dot (.) becomes two underscores (__).&lt;/p&gt;

&lt;p&gt;I would suggest you to wrap those two ENV’s with the new &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLE_*&lt;/code&gt;, specially if you have to go and change your
continuous integration setup and then you have to go and change your staging and production servers, or maybe you are already using
those values somewhere in your project, don’t worry you can wrap them like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  BUNDLE_GEMSERVER__COM=&quot;$USERNAME:$PASSWORD&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the equivalent of doing the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  bundle config gems.unii.com $UNII_GEMS_USERNAME:$UNII_GEMS_PASSWORD&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now all you have to do is go through all the stages of your project that need that ENV and you will be fine.&lt;/p&gt;

&lt;p&gt;Also, you might have to update your bundler, I’ve updated mine to 1.10.6 as version 1.7.4 didn’t had this feature.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Oct 2015 23:40:00 +0100</pubDate>
        <link>http://davidslv.com/ruby/programming/2015/10/05/how-to-protect-your-credentials-on-gemfile-lock.html</link>
        <guid isPermaLink="true">http://davidslv.com/ruby/programming/2015/10/05/how-to-protect-your-credentials-on-gemfile-lock.html</guid>
        
        <category>ruby</category>
        
        <category>development</category>
        
        <category>gemfile</category>
        
        <category>bundler</category>
        
        <category>credentials</category>
        
        
        <category>ruby</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Mixpanel - How to deal with external services</title>
        <description>&lt;p&gt;I’ve been using &lt;a href=&quot;http://mixpanel.com&quot; target=&quot;\_blank&quot;&gt;Mixpanel&lt;/a&gt; for two weeks now.&lt;/p&gt;

&lt;p&gt;I’ve followed their documentation and we were sending millions of requests to their servers until last night. Seems that one of their servers went down and caused our requests to start failing which caused our end to start clogging. Although we though we were sending too many requests and for that mixpanel had blocked us temporarily (fortunately not the case but it lead us to point 2 - keep reading).&lt;/p&gt;

&lt;p&gt;This made me understand two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Because their service was down, our Sidekiq Queue was increasing and the jobs were failing, but by default Sidekiq retries them, preventing the crucial jobs to get run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you expect to send a massive amount of events then the mixpanel default consumer is not for you (I explain why in a second).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What you can do to prevent the first from happening again is having a safety point, for example here I check if the size of the queue is less than 100k to send another Mixpanel event, if it isn’t is just better not to send the event than crashing the application.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mixpanel&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MixpanelWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second one is more interesting, the ruby mixpanel library has another consumer, called &lt;a href=&quot;https://github.com/mixpanel/mixpanel-ruby/blob/master/lib/mixpanel-ruby/consumer.rb#L145&quot; target=&quot;\_blank&quot;&gt;BufferedConsumer&lt;/a&gt; which basically allocates 50 events in memory before it sends them all together in a single request, which basically reduces your requests by a lot if you think about it.&lt;/p&gt;

&lt;p&gt;Although what is really great is using it in a connection pool, which you can achieve thanks to &lt;a href=&quot;http://www.mikeperham.com/&quot; target=&quot;\_blank&quot;&gt;Mike Perham&lt;/a&gt; with his another awesome open source contribution: &lt;a href=&quot;https://github.com/mperham/connection_pool&quot; target=&quot;\_blank&quot;&gt;connection_pool&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$mixpanel_buffer_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConnectionPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;size: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MIXPANEL_POOL_CONCURRENCY&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Mixpanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BufferedConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# and initialize your Mixpanel::Tracker like so&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mixpanel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MIXPANEL_TOKEN&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$mixpanel_buffer_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think it’s wise to have this philosophy that if you using a service which you can’t control try to isolate it as much as possible from causing any side effects on your app. It’s ok if their service is down for some reason in this case, because our app doesn’t depend on them for anything other than sending events, and it’s ok if we miss some events, what is not ok is if our service gets clogged and we can’t provide a good service to our users.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jan 2015 22:40:00 +0000</pubDate>
        <link>http://davidslv.com/ruby/development/mixpanel/services/open-source/2015/01/29/mixpanel.html</link>
        <guid isPermaLink="true">http://davidslv.com/ruby/development/mixpanel/services/open-source/2015/01/29/mixpanel.html</guid>
        
        
        <category>ruby</category>
        
        <category>development</category>
        
        <category>mixpanel</category>
        
        <category>services</category>
        
        <category>open-source</category>
        
      </item>
    
      <item>
        <title>Welcome to 2015!</title>
        <description>&lt;p&gt;Happy New Year 2015!&lt;/p&gt;

&lt;p&gt;Recently I’ve read an &lt;a href=&quot;http://www.morgadinho.org/2014/12/28/doing-things-you-like-is-not-a-waste-of-time/&quot; target=&quot;\_blank&quot;&gt;article&lt;/a&gt; from a friend
which I completely agree with, and I would like to emphasis that whatever you do at work, avoid &lt;a href=&quot;http://en.wikipedia.org/wiki/Burnout_(psychology){:target=&amp;quot;\_blank&amp;quot;}&quot;&gt;Burnout!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used to spend hours at night reading all the things I could to keep myself on track,
but that eventually dragged me into burnout, I was consuming so much information
and going to bed so late that the next day my productivity wouldn’t be as great as if
I had a proper rest.&lt;/p&gt;

&lt;p&gt;I’ve been always hungry to learn, but what I wasn’t realising was the quality of what I
was reading, most things I’ve read and I spent time on wasn’t exactly the right
things for me. With the help of colleagues and friends I understand where to
search for what I need and most important not waste my time reading unnecessary
things, for example as Ruby developer I like to know what’s going on,
so I follow &lt;a href=&quot;http://rubyweekly.com/&quot; target=&quot;\_blank&quot;&gt;Ruby Weekly&lt;/a&gt;, if you are a Perl or JavaScript
I know they have their own weekly emails as well, this allows you to keep on
track of what is changing and what is new.&lt;/p&gt;

&lt;p&gt;What I’m trying to say is by keeping your sources of information right it can
save you a lot of your time, like a ex-colleague told me once “The good articles will bubble up”,
also keep time for yourself, your friends, your family, because if you end up sucking all your time
on work related things you might end up looking up your shoulder one day and everyone is gone!&lt;/p&gt;

&lt;p&gt;Honestly I think a bit of “fresh air” always helps you achieving your goals,
think about things you like to do, make them your hobby (cooking, walk, take photos, play games, be with friends), you will be impressed how disconnecting from work actually helps you being connected (&lt;a href=&quot;https://www.youtube.com/watch?v=7ae0tzVo8Fw&quot; target=&quot;\_blank&quot;&gt;Disconnect to Connect&lt;/a&gt;). If you can’t think of anything
simply leave your comfort zone, get out, you will find something, believe me.&lt;/p&gt;

&lt;p&gt;That’s why I decided to start 2015 with a 2 weeks away from programming, I
felt I needed time for myself, to disconnect from what I do on a daily basis,
and honestly it feels good, I totally recommend you.&lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jan 2015 22:40:00 +0000</pubDate>
        <link>http://davidslv.com/life/coding/resolution/2015/01/05/welcome-to-2015.html</link>
        <guid isPermaLink="true">http://davidslv.com/life/coding/resolution/2015/01/05/welcome-to-2015.html</guid>
        
        
        <category>life</category>
        
        <category>coding</category>
        
        <category>resolution</category>
        
      </item>
    
      <item>
        <title>Handmade Hero on OSX</title>
        <description>&lt;p&gt;I’ve been following &lt;a href=&quot;http://handmadehero.org/&quot; target=&quot;\_blank&quot;&gt;Handmade Hero&lt;/a&gt; basically since the beginning,
although I know myself too well to start watching the videos straight away, it’s like
watching a TV-Show and when the episode ends you just want to jump to the next one!
I simply can’t wait! So I gave it time to have more videos and then I can catch up.&lt;/p&gt;

&lt;p&gt;Now was the moment for me to start, there are 20 videos on &lt;a href=&quot;https://www.youtube.com/user/handmadeheroarchive&quot; target=&quot;\_blank&quot;&gt;Youtube&lt;/a&gt;,
&lt;a href=&quot;http://mollyrocket.com/casey/about.html&quot; target=&quot;\_blank&quot;&gt;Casey Muratori&lt;/a&gt; has been doing an excelent work explaining everything to us and
I just can’t wait to start seeing more and more! Also I liked it so much that I contributed by Pre-Ordering which gives you access to the source code.&lt;/p&gt;

&lt;p&gt;There’s only one problem, I only use OSX as my Operative System and right now the videos are very focused on Windows Operative System,
but that is no show stopper! No, no, no!&lt;/p&gt;

&lt;p&gt;Furtunately there’s been a lot of attention, and lots of people believe in this project and they have been helping out!
I found out that &lt;a href=&quot;http://davidgow.net/&quot; target=&quot;\_blank&quot;&gt;David Gow&lt;/a&gt; is doing a port for Linux which he called it
&lt;a href=&quot;http://davidgow.net/handmadepenguin/&quot; target=&quot;\_blank&quot;&gt;Handmade Penguin&lt;/a&gt; and I’m very grateful for that!&lt;/p&gt;

&lt;p&gt;There’s a few caveats from following David’s code, because Linux and Unix are
very similar systems, but as they say the beauty (or headache) is in the details!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You should install &lt;a href=&quot;https://www.libsdl.org/download-2.0.php&quot; target=&quot;\_blank&quot;&gt;SDL&lt;/a&gt; from source, so you have it available on the terminal.&lt;/li&gt;
  &lt;li&gt;David suggests KDevelop for debugging, but you will not find it on OSX, I found instead &lt;a href=&quot;http://clewn.sourceforge.net/install.html&quot; target=&quot;\_blank&quot;&gt;Clewn&lt;/a&gt;,
but I didn’t install it as it depends on netbeans and felt like too much effort for now, maybe on a later stage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## Surprise, Surprise!&lt;/p&gt;

&lt;p&gt;I followed Chapter 1 and Chapter 2, when I finished my code on Chapter 2 based on David’s I notice that something was wrong,
initially I thought that I had missed something, the window was suppose to be flickery when it was resized or dragged around,
but such thing wasn’t happening, so I decided to print some text inside the case statement, just in case it was too fast for my eyes to catch,
but after some resizes and dragging around my text didn’t appear, so there was only one explanation, it wasn’t getting inside the case statement.
As I’m not a game developer I felt the need to contact David and tell him about the situation.&lt;/p&gt;

&lt;p&gt;I sent him the following email&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello David,

Thanks for your time writing the Handmade Hero for Linux,
for the past 4 hours I&#39;ve been reading, setup and coding what you wrote
but on OSX (sorry, it&#39;s the only platform I have =D )

And I&#39;m emailing you because I think something unexpected happened
(I even copy pasted your code to see if I missed something, but I didn&#39;t).

According to your description the window is suppose to flicker between
black and white when the window is resized or dragged around,
although at least in OSX the case statement for SDL_WINDOWEVENT_EXPOSED
is never executed, and I know that because I added a printf in the beginning,
and as you can see in the screenshot the message never appears.

Do you have any idea why this happens?
I have the code on github if you just want to double check,
but is basically the same as if I had copy pasted your code.
https://github.com/Davidslv/handmade-fan

Thank you for your time and enjoy your weekend,
David Silva&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For my surprise David actually answered my email, which I think it was very kind of him,
honestly there’s not that many developers that take their time to answer, specially on a weekend!
His answer was very friendly and detailed why the situation differs from both operating systems.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hi,

Glad you&#39;re enjoying Handmade Penguin.

I _do_ in fact have an idea as to why this happens! Basically OSX
behaves a bit differently: expose messages don&#39;t happen by default.

We can look through the SDL code to see how things work. The code
to generate the SDL_WINDOWEVENT_EXPOSED event on OSX is in a &quot;handler&quot;
for the &quot;windowDidExpose&quot; notification:

https://hg.libsdl.org/SDL/file/a40415296b77/src/video/cocoa/SDL_cocoawindow.m#l459

This is a bit hard to find, but if we look at the Apple documentation here:

https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/WinPanel/Tasks/SettingWindowImageAttr.html

We see that windows on OSX can have different &quot;backing store&quot; types.
There are three types &quot;buffered&quot;, &quot;retained&quot; and &quot;nonretained&quot;. Of
these, &quot;nonretained&quot; behaves as one would expect: only the exposed
regions are redrawn and we get expose events. &quot;buffered&quot; behaves more
like a compositing window manager: we render the window to an offscreen
buffer, and the system then redraws the contents of that when needed.
SDL uses a buffered window (it&#39;s the default), and so never gets exposed
events.

Ultimately, the only difference we have is that OSX doesn&#39;t sent Exposed
messages when the window is resized, whereas X11 usually does.
You could get back the behaviour by running your draw code in the
SDL_WINDOWEVENT_RESIZED (or SDL_WINDOWEVENT_SIZE_CHANGED) event handlers.

Cheers,
— David&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think this is very important to share because allows people to understand that
different operating systems behave differently even when they are quite similar.&lt;/p&gt;

&lt;p&gt;And as David says “this is a bit hard to find”, if he never replied I probably
would never get it because SDL, C++ and game developing itself is out of my
comfort zone, I don’t do it on a daily basis which makes it difficult to know
what to search for when you are in need.&lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;/p&gt;

&lt;p&gt;David Silva&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Dec 2014 22:40:00 +0000</pubDate>
        <link>http://davidslv.com/c++/handmade/gamedev/2014/12/13/handmade-hero-on-osx.html</link>
        <guid isPermaLink="true">http://davidslv.com/c++/handmade/gamedev/2014/12/13/handmade-hero-on-osx.html</guid>
        
        
        <category>c++</category>
        
        <category>handmade</category>
        
        <category>gamedev</category>
        
      </item>
    
  </channel>
</rss>
